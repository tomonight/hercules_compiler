// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commandV3.proto

/*
Package command is a generated protocol buffer package.

It is generated from these files:
	commandV3.proto

It has these top-level messages:
	CommandV3
*/
package command

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "hercules_compiler/rce-executor/zcagent/command/commonV3"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandV3 struct {
	// agent Ip地址
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// agent port地址
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// 命令内容
	CommandContent string `protobuf:"bytes,3,opt,name=commandContent" json:"commandContent,omitempty"`
	CommandType    string `protobuf:"bytes,4,opt,name=commandType" json:"commandType,omitempty"`
	RequestId      string `protobuf:"bytes,5,opt,name=requestId" json:"requestId,omitempty"`
	Username       string `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	Passwd         string `protobuf:"bytes,7,opt,name=passwd" json:"passwd,omitempty"`
	// 超时时间
	TimeOut int64 `protobuf:"varint,8,opt,name=timeOut" json:"timeOut,omitempty"`
}

func (m *CommandV3) Reset()                    { *m = CommandV3{} }
func (m *CommandV3) String() string            { return proto.CompactTextString(m) }
func (*CommandV3) ProtoMessage()               {}
func (*CommandV3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommandV3) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CommandV3) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CommandV3) GetCommandContent() string {
	if m != nil {
		return m.CommandContent
	}
	return ""
}

func (m *CommandV3) GetCommandType() string {
	if m != nil {
		return m.CommandType
	}
	return ""
}

func (m *CommandV3) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *CommandV3) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CommandV3) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *CommandV3) GetTimeOut() int64 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

func init() {
	proto.RegisterType((*CommandV3)(nil), "command.CommandV3")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommandV3Server service

type CommandV3ServerClient interface {
	// 服务流式RPC,接受到请求，先返回是否接受到的结果，然后继续执行，最后把执行结果返回
	ExecuteCommand(ctx context.Context, in *CommandV3, opts ...grpc.CallOption) (CommandV3Server_ExecuteCommandClient, error)
}

type commandV3ServerClient struct {
	cc *grpc.ClientConn
}

func NewCommandV3ServerClient(cc *grpc.ClientConn) CommandV3ServerClient {
	return &commandV3ServerClient{cc}
}

func (c *commandV3ServerClient) ExecuteCommand(ctx context.Context, in *CommandV3, opts ...grpc.CallOption) (CommandV3Server_ExecuteCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CommandV3Server_serviceDesc.Streams[0], c.cc, "/command.CommandV3Server/executeCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandV3ServerExecuteCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandV3Server_ExecuteCommandClient interface {
	Recv() (*commonV3.ResultMessageV3, error)
	grpc.ClientStream
}

type commandV3ServerExecuteCommandClient struct {
	grpc.ClientStream
}

func (x *commandV3ServerExecuteCommandClient) Recv() (*commonV3.ResultMessageV3, error) {
	m := new(commonV3.ResultMessageV3)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CommandV3Server service

type CommandV3ServerServer interface {
	// 服务流式RPC,接受到请求，先返回是否接受到的结果，然后继续执行，最后把执行结果返回
	ExecuteCommand(*CommandV3, CommandV3Server_ExecuteCommandServer) error
}

func RegisterCommandV3ServerServer(s *grpc.Server, srv CommandV3ServerServer) {
	s.RegisterService(&_CommandV3Server_serviceDesc, srv)
}

func _CommandV3Server_ExecuteCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandV3)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandV3ServerServer).ExecuteCommand(m, &commandV3ServerExecuteCommandServer{stream})
}

type CommandV3Server_ExecuteCommandServer interface {
	Send(*commonV3.ResultMessageV3) error
	grpc.ServerStream
}

type commandV3ServerExecuteCommandServer struct {
	grpc.ServerStream
}

func (x *commandV3ServerExecuteCommandServer) Send(m *commonV3.ResultMessageV3) error {
	return x.ServerStream.SendMsg(m)
}

var _CommandV3Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "command.CommandV3Server",
	HandlerType: (*CommandV3ServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "executeCommand",
			Handler:       _CommandV3Server_ExecuteCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commandV3.proto",
}

func init() { proto.RegisterFile("commandV3.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4d, 0x4b, 0x33, 0x31,
	0x10, 0xc7, 0x9f, 0xf4, 0xbd, 0xf3, 0xc0, 0x56, 0x06, 0x91, 0x50, 0x44, 0x96, 0x1e, 0xa4, 0xa7,
	0x20, 0xee, 0x45, 0x3c, 0xb6, 0x27, 0x0f, 0xc5, 0xb2, 0x4a, 0xef, 0xe9, 0xee, 0x50, 0x0a, 0xe6,
	0xc5, 0x24, 0x5b, 0xf5, 0x03, 0xfb, 0x3d, 0xa4, 0x21, 0x5b, 0xa5, 0xb7, 0xf9, 0xff, 0x7e, 0x7f,
	0x66, 0x37, 0x03, 0x93, 0xca, 0x28, 0x25, 0x75, 0xbd, 0x29, 0x84, 0x75, 0x26, 0x18, 0x1c, 0x26,
	0x30, 0xcd, 0x8e, 0x83, 0xd1, 0xad, 0x98, 0x7d, 0x33, 0x18, 0x2f, 0xdb, 0x32, 0x66, 0xd0, 0xd9,
	0x5b, 0xce, 0x72, 0x36, 0x1f, 0x97, 0x9d, 0xbd, 0x45, 0x84, 0x9e, 0x35, 0x2e, 0xf0, 0x4e, 0xce,
	0xe6, 0xfd, 0x32, 0xce, 0x78, 0x0b, 0x59, 0x5a, 0xb6, 0x34, 0x3a, 0x90, 0x0e, 0xbc, 0x1b, 0xfb,
	0x67, 0x14, 0x73, 0xf8, 0x9f, 0xc8, 0xeb, 0x97, 0x25, 0xde, 0x8b, 0xa5, 0xbf, 0x08, 0xaf, 0x61,
	0xec, 0xe8, 0xbd, 0x21, 0x1f, 0x9e, 0x6a, 0xde, 0x8f, 0xfe, 0x17, 0xe0, 0x14, 0x46, 0x8d, 0x27,
	0xa7, 0xa5, 0x22, 0x3e, 0x88, 0xf2, 0x94, 0xf1, 0x0a, 0x06, 0x56, 0x7a, 0xff, 0x51, 0xf3, 0x61,
	0x34, 0x29, 0x21, 0x87, 0x61, 0xd8, 0x2b, 0x7a, 0x6e, 0x02, 0x1f, 0xe5, 0x6c, 0xde, 0x2d, 0xdb,
	0x78, 0xbf, 0x82, 0xc9, 0xe9, 0x99, 0x2f, 0xe4, 0x0e, 0xe4, 0xf0, 0x11, 0x32, 0xfa, 0xa4, 0xaa,
	0x09, 0x94, 0x0c, 0xa2, 0x48, 0xbf, 0x27, 0x4e, 0xdd, 0xe9, 0x85, 0x28, 0xc9, 0x37, 0x6f, 0x61,
	0x45, 0xde, 0xcb, 0x1d, 0x6d, 0x8a, 0xd9, 0xbf, 0x3b, 0xb6, 0x78, 0x80, 0x9b, 0xca, 0x28, 0x41,
	0x5a, 0x19, 0x51, 0x6f, 0xa5, 0xf4, 0x62, 0xe7, 0x6c, 0x25, 0x0e, 0x45, 0xbb, 0x61, 0x71, 0x79,
	0xf6, 0xb9, 0xf5, 0xf1, 0xdc, 0x6b, 0xb6, 0x1d, 0xc4, 0xbb, 0x17, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xab, 0xf6, 0x4e, 0xd7, 0xa3, 0x01, 0x00, 0x00,
}
